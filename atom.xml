<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zengxianlin&#39;s blog</title>
  
  <subtitle>The harder you work, the luckier you will be</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zengxianlin.github.io/"/>
  <updated>2018-09-26T03:56:09.789Z</updated>
  <id>https://zengxianlin.github.io/</id>
  
  <author>
    <name>曾宪林</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack使用介绍-1</title>
    <link href="https://zengxianlin.github.io/2018/09/26/webpack%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D-1/"/>
    <id>https://zengxianlin.github.io/2018/09/26/webpack使用介绍-1/</id>
    <published>2018-09-26T03:53:39.000Z</published>
    <updated>2018-09-26T03:56:09.789Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack特点"><a href="#webpack特点" class="headerlink" title="webpack特点"></a>webpack特点</h2><ul><li>webpack本质上是nodejs的一个包，所以webpack是基于node.exe来运行的</li><li>想要运行webpack就必须要安装node.exe</li><li>webpakc是在开发阶段要被程序员使用的，但是在生成环节中是用不到的</li></ul><h2 id="如何安装webpack"><a href="#如何安装webpack" class="headerlink" title="如何安装webpack"></a>如何安装webpack</h2><ul><li>安装node.exe的同事会自动安装好npm 包管理工具</li><li>npm 包这个管理器下载的包是来源于国外，所以速度回很慢，甚至出错<br>所以我们使用国内taobao开发的一个cnpm来替代npm的使用</li></ul><h2 id="使用webpack之前的准备工作"><a href="#使用webpack之前的准备工作" class="headerlink" title="使用webpack之前的准备工作"></a>使用webpack之前的准备工作</h2><ul><li>安装node环境</li><li>npm i cnpm -g 将cnpm全局安装</li><li>cnpm i webpack -g 将webpack安装成为全局包</li></ul><h2 id="学习nodejs的模块化开发"><a href="#学习nodejs的模块化开发" class="headerlink" title="学习nodejs的模块化开发"></a>学习nodejs的模块化开发</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1、在nodejs中一切.js文件都可以是一个模块</span><br><span class="line">2、calc.js</span><br><span class="line">    function add(x,y)&#123;return x + y;&#125;</span><br><span class="line">    module.exports = add;</span><br><span class="line"></span><br><span class="line">3、main.js使用calc.js中的add方法</span><br><span class="line">    导calc.js模块</span><br><span class="line">    var calcExports = require(&apos;./calc.js&apos;);</span><br></pre></td></tr></table></figure><h2 id="webpack的使用方式"><a href="#webpack的使用方式" class="headerlink" title="webpack的使用方式"></a>webpack的使用方式</h2><ul><li>第一种使用方式：webpack 入口文件.js的路径  输出文件.js的路径</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在当前要打包的入口.js文件的位置打开cmd ，输入 webpack 入口文件.js  输出文件.js</span><br><span class="line"></span><br><span class="line">使用案例：下午02 - webpack的基本指令使用 .itcast</span><br></pre></td></tr></table></figure><ul><li>第二种使用方式：webpack 结合 webpack.config.js 配置文件进行打包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">目的：在cmd面板中直接利用  webpack指令即可进行打包，</span><br><span class="line">特点：如果直接指向 webpack 指令，webpack指令会自动去查找当前目录下的webpack.config.js文件</span><br><span class="line"></span><br><span class="line">编写步骤：</span><br><span class="line"></span><br><span class="line">1、webpack.config.js中定义入口文件和输出文件的 内容</span><br><span class="line"></span><br><span class="line">module.exports=&#123;</span><br><span class="line">// 1.0 定义打包的入口文件路径</span><br><span class="line">entry:&apos;./src/main.js&apos;,</span><br><span class="line">output:&#123;</span><br><span class="line">    path:&apos;./src&apos;,   //打包以后的文件存放目录</span><br><span class="line">    filename:&apos;build.js&apos;  // 打包以后生成的文件名称</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">2、在与webpack.config.js文件相同的目录下打开cmd，执行webpack即可完成打包</span><br></pre></td></tr></table></figure><ul><li><p>利用webpack完成 css文件的打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">注意点：webpack是利用style-loader和css-loader这两个nodejs的包来完成.css文件的打包工作</span><br><span class="line"></span><br><span class="line">步骤：</span><br><span class="line">    1、cnpm i style-loader css-loader 安装本地包</span><br><span class="line">        style-loader与css-loader会依赖于其他的很多包，所以一般我们在将这个项目文件发送给其他人使用的时候，是要删除 node_modeuls这个文件夹的，这时候就有可能不知道这个项目中依赖于哪些第三方包</span><br><span class="line"></span><br><span class="line">        解决方案：</span><br><span class="line">        node.exe中提供了一个 package.json文件用来存放当前安装的所有包，</span><br><span class="line">        这些包分为：</span><br><span class="line">        1、开发阶段使用的包      cnpm i 包名称 --save-dev</span><br><span class="line">         --save-dev对应的是package.json devDependencies节点</span><br><span class="line">        2、生产环境阶段使用的包  cnpm i 包名称 --save</span><br><span class="line">            --save对应的是package.json dependencies节点</span><br><span class="line"></span><br><span class="line">        保存的步骤：</span><br><span class="line">        1、利用 cnpm init 来生成一个 package.json文件</span><br><span class="line">        2、cnpm i style-loader css-loader  --save-dev</span><br><span class="line"></span><br><span class="line">    2、将style-loader与css-loader配置在 webpack.config.js中，webpack才能使用这两个loader文件</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            // 打包css文件</span><br><span class="line">            test:/\.css$/,   //表示当前要打包的文件的后缀正则表达式</span><br><span class="line">            loader:&apos;style-loader!css-loader&apos; //表示先利用css-loader解析.css文件，再调用style-loader打包</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>利用webpack完成 sass 文件的打包</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">步骤：（如果npm安装错误，则使用cnpm）</span><br><span class="line">1、cnpm install sass-loader node-sass --save-dev</span><br><span class="line">2、sass-loader 在webpack.config.js中增加一个 loader节点</span><br><span class="line"></span><br><span class="line">注意点： sass文件的打包依赖于 sass-loader 解析成原生的 .css语法</span><br><span class="line">所以要最终打包成功就必须要依赖于style-loader css-loader</span><br><span class="line">所以在配置 sass的时候，</span><br><span class="line">style-loader!css-loade!sass-loader</span><br><span class="line"></span><br><span class="line">     &#123;</span><br><span class="line">         test:/\.scss$/,   //表示当前要打包的文件的后缀正则表达式</span><br><span class="line">         loader:&apos;style-loader!css-loader!sass-loader&apos;实现sass文件的打包</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><ul><li>利用webpack完成 less 文件的打包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">步骤：（如果npm安装错误，则使用cnpm）</span><br><span class="line">1、cnpm install less-loader less  --save-dev</span><br><span class="line"></span><br><span class="line">2、less-loader 在webpack.config.js中增加一个 loader节点</span><br><span class="line">    注意点： 在配置 loader:&apos;&apos; 对应的loader的时候，要</span><br><span class="line">   按照 style-loader!css-loader!less-loader 配置</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line">            // 打包less文件</span><br><span class="line">            test:/\.less$/,   //表示当前要打包的文件的后缀正则表达式</span><br><span class="line">            loader:&apos;style-loader!css-loader!less-loader&apos; //实现sass文件的打包</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><ul><li>利用webpack完成 url()导入资源文件的打包</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">例如需求：</span><br><span class="line">    background-image: url(../imgs/home.png)</span><br><span class="line">    那么webpack必须利用 url-loader 这个包去解析，而url-loader依赖file-loader，所以</span><br><span class="line">    步骤：</span><br><span class="line">    1、npm i url-loader file-loader --save-dev</span><br><span class="line"></span><br><span class="line">    2、url-loader在webpack.config.js中增加一个 loader节点</span><br><span class="line">            &#123;</span><br><span class="line">                // 打包url()请求的资源文件</span><br><span class="line">                test:/\.(png|jpg|gif|ttf)$/,   // 注意url可能请求多个资源，所以将来在项目中通过url导入的资源扩展名必须配置在这里</span><br><span class="line">                // loader:&apos;url-loader&apos;  //这种配置会将图片变成一个base64的字符串存储到build.js中，如果图片很大的话，那么会造成build.js也比较大，加载的时候会导致效率低下</span><br><span class="line">                loader:&apos;url-loader?limit=40000&apos; //限制图片的大小如果&lt;40k则把他当做base64字符串存储到build.js中，如果&gt;40k 则单独将图片存放到磁盘上，将路径打包进去bulid.js</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><ul><li>利用webpack完成 es6转es5</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">步骤：</span><br><span class="line">1、npm install babel-core babel-loader babel-preset-es2015 babel-plugin-transform-runtime --save-dev</span><br><span class="line"></span><br><span class="line"> 注意：babel-plugin-transform-runtime 安装是为了在后面能够正常编译.vue这个文件不出错</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、webpack.config.js配置</span><br><span class="line"></span><br><span class="line">    1.0 module对象中的loaders中配置(注意：无论webpack是什么版本，都必须配置)：</span><br><span class="line">        &#123;</span><br><span class="line">                // 将当前项目中所有的.js文件都要进行es6转es5操作，node_moudels除外</span><br><span class="line">                test:/\.js$/,   //表示当前要打包的文件的后缀正则表达式</span><br><span class="line">                // loader:&apos;babel-loader?presets[]=es2015&apos;, //如果写到这里，将来在打包.vue文件的时候会报错，表示先利用css-loader解析.css文件，再调用style-loader打包</span><br><span class="line">                loader:&apos;babel-loader&apos;,</span><br><span class="line">                exclude:/node_modules/  //node_modules中的所有.js文件不去转换，提高打包性能</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    2.0 如果 webpack是 1.* 版本，则：module对象的后面配置：</span><br><span class="line">        babel:&#123;</span><br><span class="line">             presets: [&apos;es2015&apos;],</span><br><span class="line">             plugins: [&apos;transform-runtime&apos;]  //这句代码就是为了解决打包.vue文件不报错</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    2.1 如果 webpack是 2.* 版本，则：在与webpack.config.js配置文件相同目录下，新建一个【.babelrc】文件，该文件内容如下：</span><br><span class="line">        &#123;</span><br><span class="line">             presets: [&apos;es2015&apos;],</span><br><span class="line">             plugins: [&apos;transform-runtime&apos;]  //这句代码就是为了解决打包.vue文件不报错</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;webpack特点&quot;&gt;&lt;a href=&quot;#webpack特点&quot; class=&quot;headerlink&quot; title=&quot;webpack特点&quot;&gt;&lt;/a&gt;webpack特点&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;webpack本质上是nodejs的一个包，所以webpack是基于no
      
    
    </summary>
    
      <category term="webpack" scheme="https://zengxianlin.github.io/categories/webpack/"/>
    
    
      <category term="工具箱" scheme="https://zengxianlin.github.io/tags/%E5%B7%A5%E5%85%B7%E7%AE%B1/"/>
    
  </entry>
  
  <entry>
    <title>Git教程</title>
    <link href="https://zengxianlin.github.io/2018/09/21/Git%E6%95%99%E7%A8%8B/"/>
    <id>https://zengxianlin.github.io/2018/09/21/Git教程/</id>
    <published>2018-09-21T07:44:02.000Z</published>
    <updated>2018-09-21T09:52:23.595Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2018/09/21/Git教程/0.jpg" alt=""></p><h2 id="在windows安装"><a href="#在windows安装" class="headerlink" title="在windows安装"></a>在windows安装</h2><p>windows上使用git，可以去git官网直接<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">下载安装</a>，安装成功后，可以右键鼠标，菜单上看到 <code>Git Bash</code> ，说明git安装成功。<br>以上步骤OK以后，还需要配置的您个人信息，右键打开 <code>Git Bash</code>，在命令行中输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"userName"</span></span><br><span class="line">git config --global user.email <span class="string">"email"</span></span><br></pre></td></tr></table></figure></p><p>可能你想查看你自己配置的账号信息，可以操作如下：<br>config 配置有三个级别 system、global（用户）、local（当前仓库），使用–system/global/local 可以找到配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// config 配置指令</span><br><span class="line">git config</span><br></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 查看系统 system</span><br><span class="line">git config --system --list</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 查看当前用户（global）配置 system</span><br><span class="line">git config --global --list</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 查看当前仓库（global）配置 system</span><br><span class="line">git config --<span class="built_in">local</span> --list</span><br></pre></td></tr></table></figure><p>小提示：本人没有配置local，所以就报错了！<br><img src="/2018/09/21/Git教程/20180921162127.png" alt=""><br>再或者，你可能需要清除电脑上的git账号信息时，可以使用这个命令清除你的账号信息，你再去看global的信息，是否已经删除成功！<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --system --<span class="built_in">unset</span> credential.helper</span><br></pre></td></tr></table></figure></p><h2 id="初始化-Git仓库"><a href="#初始化-Git仓库" class="headerlink" title="初始化 Git仓库"></a>初始化 Git仓库</h2><p>初始化一个Git仓库或把某个目录变成Git可以管理的仓库，使用命令 <code>git init</code>：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></p><p>成功后，在你的当前目录下会有个.git的文件，这个是git的跟踪管理版本库，没事不要乱改，改乱了会破坏git仓库<br>当我们要写东西的时候，一定是放在刚刚创建下的.git文件的同级目录中，否则，git它无法找到你写的东西。<br>我们现在创建一个文件 <code>helloWord.text</code><br>第一步，用命令 <code>git add</code>告诉git，要把文件添加到仓库中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 命令执行后，没有任何提示，说明添加成功</span><br><span class="line">git add helloWord.text</span><br></pre></td></tr></table></figure></p><p>第二步，用命令 <code>git commit</code>告诉git，要把文件提交到仓库中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 命令执行后，没有任何提示，说明添加成功</span><br><span class="line">git commit -m <span class="string">"我提交了helloWord.text到仓库中"</span></span><br></pre></td></tr></table></figure></p><p>小提示：-m是表示提交的一个说明</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><blockquote><p><code>git status</code> : 查看当前仓库中文件的状态<br><code>git status -s</code> : 文件状态的简写（M - 修改， A - 添加， D - 删除， R - 重命名，?? - 未追踪）。<br><code>git add &lt;文件名&gt;</code> ：将后方紧跟的文件进行暂存，以便commit使用<br><code>git reset HEAD &lt;文件名&gt;</code> : 将已经暂存的文件进行撤销，回到未暂存的状态<br><code>git checkout -- &lt;文件名&gt;</code> ：撤销对尚未暂存文件的修改，该操作不可逆，慎用<br><code>git commit -a</code> : 对那些被修改的文件单尚未暂存和提交的文件进行暂存和提交。注意：对未暂存的新增文件无效。<br><code>git commit</code> : 对暂存区的文件进行提交到本地仓库<br><code>git push</code> : 将本地仓库已经提交的内容发布到远端</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/2018/09/21/Git教程/0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;在windows安装&quot;&gt;&lt;a href=&quot;#在windows安装&quot; class=&quot;headerlink&quot; title=&quot;在windows安装&quot;&gt;&lt;/a&gt;在windo
      
    
    </summary>
    
      <category term="git" scheme="https://zengxianlin.github.io/categories/git/"/>
    
    
      <category term="工具箱" scheme="https://zengxianlin.github.io/tags/%E5%B7%A5%E5%85%B7%E7%AE%B1/"/>
    
  </entry>
  
  <entry>
    <title>前端书写规范</title>
    <link href="https://zengxianlin.github.io/2018/09/20/%E5%89%8D%E7%AB%AF%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/"/>
    <id>https://zengxianlin.github.io/2018/09/20/前端书写规范/</id>
    <published>2018-09-20T08:47:12.184Z</published>
    <updated>2018-09-20T10:08:39.459Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-项目文件及文件命名规范"><a href="#1-项目文件及文件命名规范" class="headerlink" title="1.项目文件及文件命名规范"></a>1.项目文件及文件命名规范</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">│  index.html</span><br><span class="line">│</span><br><span class="line">├─css</span><br><span class="line">│      base.css</span><br><span class="line">│      home.css</span><br><span class="line">│</span><br><span class="line">├─images</span><br><span class="line">├─js</span><br><span class="line">│  ├─core</span><br><span class="line">│  │      common.js</span><br><span class="line">│  │</span><br><span class="line">│  ├─libs</span><br><span class="line">│  │      jquery-1.12.0.min.js</span><br><span class="line">│  │</span><br><span class="line">│  └─views</span><br><span class="line">│          home.js</span><br><span class="line">│</span><br><span class="line">└─page</span><br><span class="line">        home.html</span><br></pre></td></tr></table></figure><p>(1):例如一个home模块页面 =&gt; （文件命名要具有可识别与模块含义的名称）<br>html: page/home.html<br>css: css/home.css<br>js: js/ views/home.js</p><h3 id="2-html的class-、id等正确命名方式"><a href="#2-html的class-、id等正确命名方式" class="headerlink" title="2.html的class 、id等正确命名方式"></a>2.html的class 、id等正确命名方式</h3><p>(1)：为何要正确命名：方便自己及同事之间的开发，便于理解快速查找问题<br>例如： 这是一个电影列表 .movie-list，这个单词的组合一眼便看出该html代码的含义“电影 – 列表”（命名id一般使用驼峰命名法：movieList）<br>注意：命名无需太长否则容易误导</p><h3 id="3-css-规范书写"><a href="#3-css-规范书写" class="headerlink" title="3.css 规范书写"></a>3.css 规范书写</h3><p>(1)：合理的避免使用ID一般情况下ID不应该被应用于样式。<br>ID的样式不能被复用并且每个页面中你只能使用一次ID。使用ID唯一有效的是确定网页或整个站点中的位置。尽管如此，我们应该始终考虑使用class，而不是id，除非只使用一次。（id多用于js上的编写）<br>(2)：声明结束为了保证一致性和可扩展性，每个声明应该用分号结束，每个声明换行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 不推荐</span><br><span class="line">.movie-list&#123;</span><br><span class="line">    font:20px/1.2</span><br><span class="line">&#125;</span><br><span class="line">// 推荐</span><br><span class="line">.movie-list&#123;</span><br><span class="line">    font:20px/1.2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(3)：合理利用style 在div上减少使用style，我们一般要写在html页面上的话都会在head标签内插入style既美观又便于重复使用。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span> /&gt;</span><br><span class="line">    &lt;title&gt;home&lt;/title&gt;</span><br><span class="line">    &lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</span><br><span class="line">        //推荐</span><br><span class="line">        .main&#123;</span><br><span class="line">            padding: 10px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;div class=<span class="string">"main"</span> style=<span class="string">"padding: 10px;"</span>&gt; //不推荐</span><br><span class="line">        &lt;ul class=<span class="string">"movie-list"</span> id=<span class="string">"movie-list"</span>&gt;</span><br><span class="line">            &lt;li&gt;</span><br><span class="line">                &lt;a href=<span class="string">""</span>&gt;庆中秋迎国庆&lt;/a&gt;</span><br><span class="line">            &lt;/li&gt;</span><br></pre></td></tr></table></figure></p><h3 id="4-js-规范书写"><a href="#4-js-规范书写" class="headerlink" title="4.js 规范书写"></a>4.js 规范书写</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">    &lt;script src=<span class="string">"js/libs/jquery-1.12.0.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        /**</span><br><span class="line">         * js、jquery 初始化</span><br><span class="line">         */</span><br><span class="line">        $(document).ready(<span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">            console.log(<span class="string">'方法一：jquery'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        $(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">            console.log(<span class="string">'方法一：jquery'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        window.onload=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">            console.log(<span class="string">'方法一：onload'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>(2)：引号的使用，单引号’ ‘ 优先<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//正常情况：</span><br><span class="line">console.log(<span class="string">'hello there'</span>);</span><br><span class="line"></span><br><span class="line">//双引号转码：</span><br><span class="line">$(<span class="string">"&lt;div class='box'&gt;&lt;/div&gt;"</span>);</span><br></pre></td></tr></table></figure></p><p>(3)：空格的使用问题：（关键字后  符号后 排版 函数 赋值符号= ）等<br>a 函数的括号：function hello  (name)  {}    看 (参数)的 “括号外左右”(  ) 是有空格的，”括号内name左右” 是没有空格的<br>b 关键字后需要空格：if  (condition) { … }  if和()之间需要有空格<br>c 赋值符号 = 两边需要有空格 ：var x  =  2  赋值符号 = 两边需要空格<br>d 字符串拼接符号 + 两边需要空格：var message = ‘hello, ‘  +  name  +  ‘!’ 常量和变量之间的+号，左右两边需要空格<br>e 逗号，前面不要留空格，后面留空格：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var list = [1, 2, 3, 4];</span><br><span class="line"><span class="keyword">function</span> greet (name, options) &#123; ... &#125;;</span><br></pre></td></tr></table></figure></p><p>逗号前面不留后面留空格</p><p>(4)：注释规范在描写注释时，推荐格式化且统一的注释风格，在写注释时尽量描述写代码时的思路，而不是代码做了什么。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">不推荐</span><br><span class="line">//获取订单</span><br><span class="line"><span class="keyword">function</span> getOrderByID(id)&#123;</span><br><span class="line">    var order;</span><br><span class="line">    // ...</span><br><span class="line">    <span class="built_in">return</span> order;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">方法的注释应该同意用块及注释</span><br><span class="line">推荐</span><br><span class="line">/**</span><br><span class="line"> * 根据订单id获取订单详细数据</span><br><span class="line"> * @param   &#123;[number]&#125; id [订单ID]</span><br><span class="line"> * @<span class="built_in">return</span>  &#123;[order]&#125;  [订单详细信息]</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">function</span> getOrderByID(id)&#123;</span><br><span class="line">    var order;</span><br><span class="line">    // ...</span><br><span class="line">    <span class="built_in">return</span> order;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>(5)：对象和数组的创建问题： var item = {};  不用new Object（）方式，    数组：var arr = []</p><h3 id="5-css、js抽取公用代码（封装js）"><a href="#5-css、js抽取公用代码（封装js）" class="headerlink" title="5.css、js抽取公用代码（封装js）"></a>5.css、js抽取公用代码（封装js）</h3><p>抽取原因：减少代码的冗余性，减少请求资源的加载时间，减少项目大小，增加代码重复使用率，使其提高工作效率。<br>(1):css 初始化 + 抽取公用（命名：base.css）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">/* 初始化 */</span><br><span class="line">* &#123;margin: 0;padding: 0;border: 0;font-style: normal;&#125;</span><br><span class="line">a &#123;text-decoration: none;outline:none;blur:expression(this.onFocus=this.blur()); color:<span class="comment">#000;&#125;</span></span><br><span class="line">ul &#123;padding: 0px;margin: 0px;&#125;</span><br><span class="line">li &#123;list-style-position: outside;list-style-type: none; vertical-align:bottom; /*fix ie6 li height bug*/ zoom:1;&#125;</span><br><span class="line">img &#123;border:0px;&#125;</span><br><span class="line">html&#123;height:100%;&#125;</span><br><span class="line">body&#123;width:100%;height:100%;position:relative;font-size: 12px;line-height:12px;font-weight: normal;font-family:<span class="string">"Helvetica Neue"</span>,Helvetica,Arial,sans-serif,<span class="string">"微软雅黑"</span>,<span class="string">"宋体"</span>;&#125;</span><br><span class="line">h1,h2,h3,h4,h5,h6&#123;font-size:12px;display:block;font-weight:normal;&#125;</span><br><span class="line">legend&#123;display:block; width:100%;&#125;</span><br><span class="line">button&#123;cursor:pointer;&#125;</span><br><span class="line">table &#123;border-collapse: collapse;border-spacing: 0;width: 100%;&#125;</span><br><span class="line">th, td, caption &#123;vertical-align: middle; font-weight: 500;&#125;</span><br></pre></td></tr></table></figure></p><p>(2):js 封装公用（命名：common.js）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line"> * 配置共用信息</span><br><span class="line"> * 共用方法封装</span><br><span class="line"> * 对外部插件的封装</span><br><span class="line"> */</span><br><span class="line">(<span class="keyword">function</span>(common)&#123;</span><br><span class="line">    util = window.util;</span><br><span class="line">    <span class="keyword">if</span>((document.domain).indexOf(<span class="string">'***'</span>) != -1)&#123;</span><br><span class="line">        util.ajax.apiUrl = <span class="string">'http://***'</span>;  //正式服务器</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        util.ajax.apiUrl = <span class="string">'http://***'</span>;  //测试服务器</span><br><span class="line">    &#125;</span><br><span class="line">    window.common = &#123;</span><br><span class="line">        init:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">           //配置接口地址及其他信息</span><br><span class="line">            util.ajax.valiHandle = <span class="keyword">function</span>(data)&#123;</span><br><span class="line">                <span class="keyword">if</span>(data.code !== undefined &amp;&amp; (data.code == <span class="string">'210'</span> || data.code == <span class="string">'102'</span>))&#123;</span><br><span class="line">                    location.href = <span class="string">'***'</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(window.common = window.common || &#123;&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="6-前端书写规范推荐网站"><a href="#6-前端书写规范推荐网站" class="headerlink" title="6.前端书写规范推荐网站"></a>6.<a href="http://www.jianshu.com/p/3140a2c5dade#" target="_blank" rel="noopener">前端书写规范推荐网站</a></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-项目文件及文件命名规范&quot;&gt;&lt;a href=&quot;#1-项目文件及文件命名规范&quot; class=&quot;headerlink&quot; title=&quot;1.项目文件及文件命名规范&quot;&gt;&lt;/a&gt;1.项目文件及文件命名规范&lt;/h3&gt;&lt;figure class=&quot;highlight bash
      
    
    </summary>
    
      <category term="前端开发文章" scheme="https://zengxianlin.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="文章" scheme="https://zengxianlin.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>前端开发工程师</title>
    <link href="https://zengxianlin.github.io/2018/09/20/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%B7%A5%E7%A8%8B%E5%B8%88/"/>
    <id>https://zengxianlin.github.io/2018/09/20/前端开发工程师/</id>
    <published>2018-09-20T01:52:27.396Z</published>
    <updated>2018-09-20T09:49:08.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>前端开发工程师是Web前端开发工程师的简称，2007年才真正开始受到重视的一个新兴职业。Web前端开发技术是一个先易后难的过程，主要包括三个要素：HTML（标准通用标记语言下的一个应用）、级联样式表和JavaScript。<br>前端开发工程师不仅要掌握基本的Web前端开发技术，网站性能优化、SEO和服务器端的基础知识，而且要学会运用各种工具进行辅助开发以及理论层面的知识，包括代码的可维护性、组件的易用性、分层语义模板和浏览器分级支持等</p></blockquote><h2 id="前端介绍"><a href="#前端介绍" class="headerlink" title="前端介绍"></a>前端介绍</h2><p>前端开发工程师是一个很新的职业，在国内乃至国际上真正开始受到重视的时间是从2005年开始的，是指Web前端开发工程师的简称。 Web前端开发是从美工演变而来的，名称上有很明显的时代特征。在互联网的演化进程中，Web 1.0时代，网站的主要内容都是静态的，用户使用网站的行为也以浏览为主。如2005年以后，互联网进入Web 2.0时代，各种类似桌面软件的Web应用大量涌现，网站的前端由此发生了翻天覆地的变化网页不再只是承载单一的文字和图片，各种富媒体让网页的内容更加生动，网页上软件化的交互形式为用户提供了更好的使用体验，这些都是基于前端技术实现的。目前web前端工程师的年薪待遇平均在10万以上，高级HTML前端工程师年薪达30—50万，很多企业对于与web前端相关的技术职位更是求贤若渴。 [1]<br>前端工程师，也叫Web前端开发工程师。他是随着web发展，细分出来的行业。Web前端开发技术主要包括三个要素：HTML、CSS和JavaScript!HTML甚至不是一门语言，仅仅是简单的标记语言!CSS只是无类型的样式修饰语言。当然可以勉强算作弱类型语言。Javascript的基础部分相对来说不难，入手还算快。<br>前端开发的入门门槛很低，与服务器端语言先慢后快的学习曲线相比，前端开发的学习曲线是先快后慢。也正因为如此，前端开发领域有很多自学成“才”的同行，但大多数人都停留在会用的阶段，因为后面的学习曲线越来越陡峭，每前进一步都很难。人们常说：不想当裁缝的司机，不是个好厨师。如果单纯只是学习前端编程语言、而不懂后端编程语言(PHP、ASP.NET，JSP、Python)，也不能算作是优秀的前端工程师。在成为一个优秀的前端工程师的道路上，充满了汗水和辛劳。</p><h5 id="网站重构"><a href="#网站重构" class="headerlink" title="网站重构"></a>网站重构</h5><p>随着Web 2.0概念的普及和W3C组织的推广，网站重构的影响力正以惊人的速度增长。XHTML+CSS布局、DHTML和Ajax像一阵旋风，铺天盖地席卷而来，包括新浪、搜狐、网易、腾讯、淘宝等在内的各种规模的IT企业都对自己的网站进行了重构。<br>网站重构的目的不是为了让网页更符合Web标准，重构的本质是构建一个前端灵活的MVC框架，即HTML作为信息模型（Model），CSS控制样式（View），JavaScript负责调度数据和实现某种展现逻辑（Controller）。同时，代码需要具有很好的复用性和可维护性。这是高效率、高质量开发以及协作开发的基础。<br>DHTML可以让用户的操作更炫，更吸引眼球；Ajax可以实现无刷新的数据交换，让用户的操作更流畅。对于普通用户来说，一个网站是否规范、功能是否强大，服务器端是用J2EE+Oracle的强大组合，还是用ASP+Access的简单组合，并没有太明显的区别。但是，前端的用户体验却给了用户直观的印象。<br>随着人们对用户体验的要求越来越高，前端开发的技术难度越来越大，Web前端开发工程师这一职业终于从设计和制作不分的局面中独立出来</p><h2 id="核心技术"><a href="#核心技术" class="headerlink" title="核心技术"></a>核心技术</h2><p>Web前端开发技术包括三个要素：HTML、CSS和JavaScript，但随着RIA的流行和普及，Flash/Flex、Silverlight、XML和服务器端语言也是前端开发工程师应该掌握的。Web前端开发工程师既要与上游的交互设计师、视觉设计师和产品经理沟通，又要与下游的服务器端工程师沟通，需要掌握的技能非常多。这就从知识的广度上对Web前端开发工程师提出了要求。如果要精于前端开发这一行，也许要先精十行。然而，全才总是少有的。所以，对于不太重要的知识，我们只需要“通”即可。但“通”到什么程度才算够用呢？对于很多初级前端开发工程师来说，这个问题是非常令人迷惑的<br>Web发展的很快，甚至可以说这些技术几乎每天都在变化!如果没有快速学习能力，就跟不上Web发展的步伐。前端工程师必须不断提升自己，不断学习新技术、新模式;仅仅依靠今天的知识无法适应未来。Web的明天与今天必将有天壤之别，而前端工程师的工作就是要搞清楚如何通过自己的Web应用程序来体现这种翻天覆地的变化。前端开发的入门门槛其实非常低，与服务器端语言先慢后快的学习曲线相比，前端开发的学习曲线是先快后慢。所以，对于从事IT工作的人来说，前端开发是个不错的切入点。也正因为如此，前端开发领域有很多自学成“才”的同行，但大多数人都停留在会用的阶段，因为后面的学习曲线越来越陡峭，每前进一步都很难<br>另一方面，正如前面所说，前端开发是个非常新的职业，对一些规范和最佳实践的研究都处于探索阶段。总有新的灵感和技术不时闪现出来，例如CSS sprite、悬浮定位、负边距布局、栅格布局等；各种JavaScript框架层出不穷，为整个前端开发领域注入了巨大的活力；浏览器大战也越来越白热化，跨浏览器兼容方案依然是五花八门。为了满足“高可维护性”的需要，需要更深入、更系统地去掌握前端知识，这样才可能创建一个好的前端架构，保证代码的质量</p><h2 id="掌握技术"><a href="#掌握技术" class="headerlink" title="掌握技术"></a>掌握技术</h2><p>掌握各种修图软件，如PS\Fireworks\AI，不要求专业设计师水平，但要会用会改，今天是一专多能的时代，光会编程讨不好饭碗的；<br>精通JavaScript、jQuery、vue、 react、angular等页面效果框架，这是前端工程师的最核心技能，是专做页面效果的技术。其实精通了JavaScript，后端编程语言，如.NET、PHP、Ruby都很容易掌握，因为其原理是一样的；<br>精通一二种模板语言，并能修改，如织梦或wordpress的模板；<br>掌握thinkphp与zend框架，能修改此类开源源码；<br>掌握html5与sencha，这是做手机等移动设备的页面前端技术；<br>掌握一二种后端编程语言，如PHP、.NET、JAVA，能读懂后端源码，实际上其原理跟JS差不多；<br>掌握node.js，熟悉各种自动化部署工具；<br>前端是重视用户体验的，不是靠美工给的页面 做出来就行了，那样不是一个合格的前端。</p><h5 id="前端开发技术"><a href="#前端开发技术" class="headerlink" title="前端开发技术"></a>前端开发技术</h5><p>必须掌握基本的Web前端开发技术，其中包括：CSS、HTML、DOM、javascript、Ajax等，在掌握这些技术的同时，还要清楚地了解它们在不同浏览器上的兼容情况、渲染原理和存在的Bug。<br>在一名合格的前端工程师的知识结构中，网站性能优化、SEO和服务器端的基础知识也是必须掌握的。<br>会运用各种工具进行辅助开发。比如：处理IE系列浏览器兼容性问题的IEtester、FF排错用的Firebug、FlashFirebug、JavaScript Debugger等。<br>除了要掌握技术层面的知识，还要掌握理论层面的知识，包括代码的可维护性、组件的易用性、分层语义模板和浏览器分级支持，等等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;&lt;p&gt;前端开发工程师是Web前端开发工程师的简称，2007年才真正开始受到重视的一个新兴职业。Web前端开发技术是一个先易
      
    
    </summary>
    
      <category term="前端开发文章" scheme="https://zengxianlin.github.io/categories/%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E6%96%87%E7%AB%A0/"/>
    
    
      <category term="文章" scheme="https://zengxianlin.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://zengxianlin.github.io/2018/09/12/hello-world/"/>
    <id>https://zengxianlin.github.io/2018/09/12/hello-world/</id>
    <published>2018-09-12T03:23:40.966Z</published>
    <updated>2018-09-21T05:18:01.177Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h4><p>程序猿最熟悉的代码，貌似都是这么一句吧！<br><br>2015年开始接触了前端这一门语言，那时候认为前端是最简单最好学的，其他同学都是走的Ios、Android（那时候薪资最高、最好找工作），这些深奥、高大上的代码，我是最不愿意接触的，无奈之下走向了前端！（一入前端深似海）</p><h4 id="我们毕业了"><a href="#我们毕业了" class="headerlink" title="我们毕业了"></a>我们毕业了</h4><p>2015年6月底，我们正式毕业了，各自踏上人生发财道路，大部分同学都去了深圳，而我独自一人来到了广州，广州这个城市生活节奏并不像北上深那么快，后面也就在广州定居下来了。</p><h4 id="初出茅庐-前端-卷铺盖"><a href="#初出茅庐-前端-卷铺盖" class="headerlink" title="初出茅庐-前端-卷铺盖"></a>初出茅庐-前端-卷铺盖</h4><p>第一家公司，是在<a href="http://www.xtownmobile.com/mobile/index.html" target="_blank" rel="noopener">广州迅维资讯技术有限公司</a><br>那个时候，公司有四个前端（平哥，胖子，me，叶总），后面来了一个实习生（金刚），平哥是我们前端老大，带领着我们这些小罗罗开车，专攻我们所有遇到不会的问题，只要你问问题没有他不会的，没错就是前端大神（七八年的老司机），我们这几个算是幸运的抱大腿了，自从跟着平哥我们开车稳得很，那时候好像是只要有他我们就能飞起，平哥经常带我们出去浪（吃喝嫖赌，不对没有嫖赌，我们是良民！平哥是个吃货），当然我们是要交会费的，由我们的金刚负责收费（我们几个经常不交会费，都是平哥催着，哈哈！）。<br>怎么说呢？平哥就像我们的大哥一样带着我们，我们其他几个就像小弟一样，有大哥罩着我们自然很开心。好景不长2年过后，由于其他原因我离职了，不到两个月叶总、胖子也都离职了（只剩下了平哥跟金刚相依为命），那时候，我们都知道平哥和金刚很舍不得大家，没办法天下没有不散的宴席。我们从一开始的工作同事变成了好友，就像叶总说的从同事变成了好友这是非常难得的，我们也都很珍惜这份情谊和感恩！<br><img src="/2018/09/12/hello-world/20180921115617.png" alt=""><br><img src="/2018/09/12/hello-world/20180921131352.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello World&quot;&gt;&lt;/a&gt;Hello World&lt;/h4&gt;&lt;p&gt;程序猿最熟悉的代码，貌似都是这么一句吧！&lt;br&gt;&lt;br&gt;2015年开
      
    
    </summary>
    
      <category term="hexo" scheme="https://zengxianlin.github.io/categories/hexo/"/>
    
    
      <category term="文章" scheme="https://zengxianlin.github.io/tags/%E6%96%87%E7%AB%A0/"/>
    
  </entry>
  
</feed>
